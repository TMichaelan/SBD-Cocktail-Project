-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public."Users"
(
    username character(64) COLLATE pg_catalog."default" NOT NULL,
    email character(64) COLLATE pg_catalog."default" NOT NULL,
    password character(32) COLLATE pg_catalog."default" NOT NULL,
    oauth_github character(100) COLLATE pg_catalog."default",
    CONSTRAINT id PRIMARY KEY (username)
);

CREATE TABLE IF NOT EXISTS public.ankieta
(
    nazwa character(255) COLLATE pg_catalog."default" NOT NULL,
    ilosc_pytan numeric NOT NULL,
    CONSTRAINT ankieta_pkey PRIMARY KEY (nazwa)
);

CREATE TABLE IF NOT EXISTS public.barman
(
    imie character(255) COLLATE pg_catalog."default" NOT NULL,
    nazwisko character(255) COLLATE pg_catalog."default" NOT NULL,
    numer_telefonu character(255) COLLATE pg_catalog."default" NOT NULL,
    adres character(255) COLLATE pg_catalog."default" NOT NULL,
    id bigserial NOT NULL,
    CONSTRAINT barman_pkey PRIMARY KEY (imie)
);

CREATE TABLE IF NOT EXISTS public.barman_koktajl
(
    barman_imie character(255) COLLATE pg_catalog."default" NOT NULL,
    koktajl_nazwa character(255) COLLATE pg_catalog."default" NOT NULL,
    id bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    CONSTRAINT "barman_Koktajl_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.czynnosc
(
    nazwa character(255) COLLATE pg_catalog."default" NOT NULL,
    kolejnosc numeric NOT NULL,
    czas_trwania time with time zone NOT NULL,
    dodatkowy_opis character(255) COLLATE pg_catalog."default",
    CONSTRAINT czynnosc_pkey PRIMARY KEY (nazwa)
);

CREATE TABLE IF NOT EXISTS public.czynnosc_przepis
(
    czynnosc_nazwa character(255) COLLATE pg_catalog."default" NOT NULL,
    przepis_nazwa_przepisa character(255) COLLATE pg_catalog."default" NOT NULL,
    id bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    CONSTRAINT czynnosc_przepis_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.kategoria_koktajli
(
    nazwa_kategorii character(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT "Kategoria_koktajli_pkey" PRIMARY KEY (nazwa_kategorii)
);

CREATE TABLE IF NOT EXISTS public.kategoria_koktajli_koktajl
(
    kategoria_koktajli_nazwa_kategorii character(255) COLLATE pg_catalog."default" NOT NULL,
    koktajl_nazwa character(255) COLLATE pg_catalog."default" NOT NULL,
    id bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    CONSTRAINT "Kategoria_koktajli_Koktajl_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.koktajl
(
    nazwa character(255) COLLATE pg_catalog."default" NOT NULL,
    obraz character(255) COLLATE pg_catalog."default",
    "srednia_ocena_u≈ºytkownika" double precision,
    srednia_ocena_sommeliera double precision,
    CONSTRAINT "Koktajl_pkey" PRIMARY KEY (nazwa)
);

CREATE TABLE IF NOT EXISTS public.odpowiedz
(
    tekst_odpowiedzi character(255) COLLATE pg_catalog."default" NOT NULL,
    ocena_uzytkownika numeric NOT NULL,
    CONSTRAINT odpowiedz_pkey PRIMARY KEY (tekst_odpowiedzi)
);

CREATE TABLE IF NOT EXISTS public.odpowiedz_koktajl
(
    odpowiedz_tekst_odpowiedzi character(255) COLLATE pg_catalog."default" NOT NULL,
    koktajl_nazwa character(255) COLLATE pg_catalog."default" NOT NULL
);

CREATE TABLE IF NOT EXISTS public.przepis
(
    nazwa_przepisa character(255) COLLATE pg_catalog."default" NOT NULL,
    ilosc_produktow numeric(3, 0) NOT NULL,
    notatka character(1000) COLLATE pg_catalog."default",
    CONSTRAINT przepis_pkey PRIMARY KEY (nazwa_przepisa)
);

CREATE TABLE IF NOT EXISTS public.pytanie
(
    nazwa_pytanie character(255) COLLATE pg_catalog."default" NOT NULL,
    tekst_pytania character(255) COLLATE pg_catalog."default" NOT NULL,
    typ_pytania character(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT pytanie_pkey PRIMARY KEY (nazwa_pytanie)
);

CREATE TABLE IF NOT EXISTS public.skladnik
(
    nazwa_skladnika character(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT skladnik_pkey PRIMARY KEY (nazwa_skladnika)
);

CREATE TABLE IF NOT EXISTS public.skladnik_przepis
(
    skladnik_nazwa_skladnika character(255) COLLATE pg_catalog."default" NOT NULL,
    przepis_nazwa_przepisa character(255) COLLATE pg_catalog."default" NOT NULL,
    miara character(45) COLLATE pg_catalog."default" NOT NULL,
    id bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    CONSTRAINT skladnik_przepis_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.sommelier
(
    pseudonim character(255) COLLATE pg_catalog."default" NOT NULL,
    recenzja character(255) COLLATE pg_catalog."default" NOT NULL,
    ocena numeric(3, 0) NOT NULL,
    CONSTRAINT "Sommelier_pkey" PRIMARY KEY (pseudonim)
);

CREATE TABLE IF NOT EXISTS public.sommelier_koktajl
(
    sommelier_pseudonim character(255) COLLATE pg_catalog."default" NOT NULL,
    koktajl_nazwa character(255) COLLATE pg_catalog."default" NOT NULL
);

CREATE TABLE IF NOT EXISTS public.ankieta_pytanie
(
    ankieta_nazwa character(255) COLLATE pg_catalog."default" NOT NULL,
    pytanie_nazwa_pytanie character(255) COLLATE pg_catalog."default" NOT NULL,
    id bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 ),
    CONSTRAINT "Pk_id" PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS public.barman_koktajl
    ADD CONSTRAINT "barman_Koktajl_Koktajl_nazwa_fkey" FOREIGN KEY (koktajl_nazwa)
    REFERENCES public.koktajl (nazwa) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.barman_koktajl
    ADD CONSTRAINT "barman_Koktajl_barman_imie_fkey" FOREIGN KEY (barman_imie)
    REFERENCES public.barman (imie) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.czynnosc_przepis
    ADD CONSTRAINT czynnosc_przepis_czynnosc_nazwa_fkey FOREIGN KEY (czynnosc_nazwa)
    REFERENCES public.czynnosc (nazwa) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.czynnosc_przepis
    ADD CONSTRAINT czynnosc_przepis_przepis_nazwa_przepisa_fkey FOREIGN KEY (przepis_nazwa_przepisa)
    REFERENCES public.przepis (nazwa_przepisa) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.kategoria_koktajli_koktajl
    ADD CONSTRAINT "Kategoria_koktajli_Koktajl_Kategoria_koktajli_nazwa_katego_fkey" FOREIGN KEY (kategoria_koktajli_nazwa_kategorii)
    REFERENCES public.kategoria_koktajli (nazwa_kategorii) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.kategoria_koktajli_koktajl
    ADD CONSTRAINT "Kategoria_koktajli_Koktajl_Koktajl_nazwa_fkey" FOREIGN KEY (koktajl_nazwa)
    REFERENCES public.koktajl (nazwa) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.koktajl
    ADD CONSTRAINT "Koktajl_Przepis_fkey" FOREIGN KEY (nazwa)
    REFERENCES public.przepis (nazwa_przepisa) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
CREATE INDEX IF NOT EXISTS "Koktajl_pkey"
    ON public.koktajl(nazwa);


ALTER TABLE IF EXISTS public.odpowiedz
    ADD CONSTRAINT odpowiedz_tekst_odpowiedzi_fkey FOREIGN KEY (tekst_odpowiedzi)
    REFERENCES public.pytanie (nazwa_pytanie) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
CREATE INDEX IF NOT EXISTS odpowiedz_pkey
    ON public.odpowiedz(tekst_odpowiedzi);


ALTER TABLE IF EXISTS public.odpowiedz_koktajl
    ADD CONSTRAINT "odpowiedz_Koktajl_Koktajl_nazwa_fkey" FOREIGN KEY (koktajl_nazwa)
    REFERENCES public.koktajl (nazwa) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.odpowiedz_koktajl
    ADD CONSTRAINT "odpowiedz_Koktajl_odpowiedz_tekst_odpowiedzi_fkey" FOREIGN KEY (odpowiedz_tekst_odpowiedzi)
    REFERENCES public.odpowiedz (tekst_odpowiedzi) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.skladnik_przepis
    ADD CONSTRAINT skladnik_przepis_przepis_nazwa_przepisa_fkey FOREIGN KEY (przepis_nazwa_przepisa)
    REFERENCES public.przepis (nazwa_przepisa) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.skladnik_przepis
    ADD CONSTRAINT skladnik_przepis_skladnik_nazwa_skladnika_fkey FOREIGN KEY (skladnik_nazwa_skladnika)
    REFERENCES public.skladnik (nazwa_skladnika) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.sommelier_koktajl
    ADD CONSTRAINT "Sommelier_Koktajl_Koktajl_nazwa_fkey" FOREIGN KEY (koktajl_nazwa)
    REFERENCES public.koktajl (nazwa) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.sommelier_koktajl
    ADD CONSTRAINT "Sommelier_Koktajl_Sommelier_Pseudonim_fkey" FOREIGN KEY (sommelier_pseudonim)
    REFERENCES public.sommelier (pseudonim) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.ankieta_pytanie
    ADD FOREIGN KEY (ankieta_nazwa)
    REFERENCES public.ankieta (nazwa) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.ankieta_pytanie
    ADD FOREIGN KEY (pytanie_nazwa_pytanie)
    REFERENCES public.pytanie (nazwa_pytanie) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

END;